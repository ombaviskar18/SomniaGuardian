import { ethers } from "ethers";
import * as dotenv from "dotenv";
import fs from "fs";
import path from "path";

dotenv.config();

// SST Contract ABI and Bytecode (compiled)
const SST_ABI = [
  "constructor(uint256 initialSupply)",
  "function name() view returns (string)",
  "function symbol() view returns (string)",
  "function decimals() view returns (uint8)",
  "function totalSupply() view returns (uint256)",
  "function balanceOf(address) view returns (uint256)",
  "function transfer(address to, uint256 amount) returns (bool)",
  "function mint(address to, uint256 amount)",
  "function owner() view returns (address)"
];

const SST_BYTECODE = "0x608060405234801561001057600080fd5b50604051610e5d380380610e5d8339818101604052810190610032919061015e565b80600081905550506101a1565b600080fd5b6000819050919050565b61005681610043565b811461006157600080fd5b50565b6000815190506100738161004d565b92915050565b60006020828403121561008f5761008e61003e565b5b600061009d84828501610064565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156100e05780820151818401526020810190506100c5565b60008484015250505050565b6000601f19601f8301169050919050565b6000610108826100a6565b61011281856100b1565b93506101228185602086016100c2565b61012b816100ec565b840191505092915050565b6000602082019050818103600083015261015081846100fd565b905092915050565b6000819050919050565b61016b81610158565b811461017657600080fd5b50565b60008151905061018881610162565b92915050565b6000602082840312156101a4576101a361003e565b5b60006101b284828501610179565b91505092915050565b610c6d806101c9600039600081fdfe608060405234801561001057600080fd5b50600436106100575760003560e01c806306fdde031461005c578063095ea7b31461007a57806318160ddd1461009857806323b872dd146100b6578063313ce567146100d4575b600080fd5b6100646100f2565b60405161007191906107a1565b60405180910390f35b610082610180565b60405161008f91906107fc565b60405180910390f35b6100a0610189565b6040516100ad9190610826565b60405180910390f35b6100be61018f565b6040516100cb91906107fc565b60405180910390f35b6100dc610198565b6040516100e9919061085d565b60405180910390f35b60606040518060400160405280601381526020017f536f6d6e6961205365727669636520546f6b656e000000000000000000000000815250905090565b600033905090565b60025490565b60006001905090565b600060ff905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6101a082610157565b810181811067ffffffffffffffff821117156101bf576101be610168565b5b80604052505050565b60006101d261014e565b90506101de8282610197565b919050565b600067ffffffffffffffff8211156101fe576101fd610168565b5b61020782610157565b9050602081019050919050565b60005b83811015610232578082015181840152602081019050610217565b60008484015250505050565b600061025161024c846101e3565b6101c8565b90508281526020810184848401111561026d5761026c610152565b5b610278848285610214565b509392505050565b600082601f8301126102955761029461014d565b5b81516102a584826020860161023e565b91505092915050565b6000602082840312156102c4576102c361014e565b5b600082015167ffffffffffffffff8111156102e2576102e1610149565b5b6102ee84828501610280565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561032c578082015181840152602081019050610311565b60008484015250505050565b6000610343826102f7565b61034d8185610302565b935061035d81856020860161030e565b61036681610157565b840191505092915050565b6000602082019050818103600083015261038a8184610338565b905092915050565b6000819050919050565b6103a581610392565b82525050565b60006020820190506103c0600083018461039c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103f1826103c6565b9050919050565b610401816103e6565b811461040c57600080fd5b50565b60008135905061041e816103f8565b92915050565b60006020828403121561043a5761043961014e565b5b60006104488482850161040f565b91505092915050565b61045981610392565b811461046457600080fd5b50565b60008135905061047681610450565b92915050565b6000602082840312156104925761049161014e565b5b60006104a084828501610467565b91505092915050565b600080604083850312156104c0576104bf61014e565b5b60006104ce8582860161040f565b92505060206104df85828601610467565b9150509250929050565b6000806000606084860312156105015761050061014e565b5b600061050f8682870161040f565b93505060206105208682870161040f565b925050604061053186828701610467565b9150509250925092565b600080fd5b600080fd5b600080fd5b60008083601f84011261055e5761055d61053b565b5b8235905067ffffffffffffffff81111561057b5761057a610540565b5b60208301915083600182028301111561059757610596610545565b5b9250929050565b600080602083850312156105b5576105b461014e565b5b600083013567ffffffffffffffff8111156105d3576105d2610149565b5b6105df85828601610548565b92509250509250929050565b6105f4816103e6565b82525050565b600060208201905061060f60008301846105eb565b92915050565b60006020828403121561062b5761062a61014e565b5b60006106398482850161040f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061068957607f821691505b60208210810361069c5761069b610642565b5b50919050565b60006040820190506106b760008301856105eb565b6106c4602083018461039c565b9392505050565b60006020820190506106e0600083018461039c565b92915050565b600081905092915050565b7f1901000000000000000000000000000000000000000000000000000000000000600082015250565b60006107276002836106e6565b9150610732826106f1565b600282019050919050565b6000819050919050565b61075861075382610392565b61073d565b82525050565b60006107698261071a565b91506107758285610747565b6020820191506107858284610747565b6020820191508190509392505050565b60006040820190506107a960008301856105eb565b6107b6602083018461039c565b9392505050565b600060208201905081810360008301526107d68184610338565b905092915050565b60008115159050919050565b6107f3816107de565b82525050565b600060208201905061080e60008301846107ea565b92915050565b61081d81610392565b82525050565b60006020820190506108386000830184610814565b92915050565b600060ff82169050919050565b6108548161083e565b82525050565b600060208201905061086f600083018461084b565b9291505056fea2646970667358221220";

async function main() {
  console.log("🚀 Deploying SST Token to Somnia Testnet");
  console.log("==========================================");
  
  const rpc = process.env.SOMNIA_RPC_URL || "https://dream-rpc.somnia.network/";
  const privateKey = process.env.PRIVATE_KEY as string;
  
  if (!privateKey) {
    throw new Error("PRIVATE_KEY is required in environment variables");
  }

  console.log("📡 Connecting to Somnia Testnet...");
  const provider = new ethers.providers.JsonRpcProvider(rpc);
  const wallet = new ethers.Wallet(privateKey, provider);
  
  console.log("👤 Deployer address:", wallet.address);
  
  // Check balance
  const balance = await provider.getBalance(wallet.address);
  console.log("💰 Balance:", ethers.utils.formatEther(balance), "STT");
  
  if (balance.lt(ethers.utils.parseEther("0.01"))) {
    throw new Error("Insufficient balance for deployment. Need at least 0.01 STT");
  }

  console.log("📦 Deploying SST Token Contract...");
  
  // Deploy SST token with 1,000,000 initial supply
  const initialSupply = ethers.utils.parseUnits("1000000", 18);
  const factory = new ethers.ContractFactory(SST_ABI, SST_BYTECODE, wallet);
  
  const contract = await factory.deploy(initialSupply);
  console.log("⏳ Waiting for deployment confirmation...");
  
  await contract.deployed();
  
  console.log("✅ SST Token deployed successfully!");
  console.log("📍 Contract Address:", contract.address);
  console.log("🔗 Explorer:", `https://somnia-testnet.socialscan.io/address/${contract.address}`);
  
  // Update contract addresses
  const addressBookPath = path.resolve(__dirname, "../contract-addresses.json");
  let current: any = {};
  if (fs.existsSync(addressBookPath)) {
    current = JSON.parse(fs.readFileSync(addressBookPath, "utf8"));
  }

  current.SST = contract.address;
  current.Network = {
    name: "Somnia Testnet (Shannon)",
    rpcUrl: rpc,
    chainId: 50312,
    currency: "STT",
    explorer: "https://somnia-testnet.socialscan.io/",
  };

  fs.writeFileSync(addressBookPath, JSON.stringify(current, null, 2));
  console.log("✅ Updated contract-addresses.json");

  // Update frontend constants
  const frontendConstantsPath = path.resolve(__dirname, "../frontend/src/constants/contracts.ts");
  const frontendConstants = `export const HELLO_UNIVERSAL_CONTRACT_ADDRESS =
  '${current.Universal || '0x0000000000000000000000000000000000000000'}';

export const SST_TOKEN_ADDRESS =
  '${contract.address}';
`;

  fs.writeFileSync(frontendConstantsPath, frontendConstants);
  console.log("✅ Updated frontend/src/constants/contracts.ts");

  console.log("");
  console.log("🎉 Deployment completed successfully!");
  console.log("");
  console.log("📋 Contract Details:");
  console.log(`   Name: Somnia Service Token`);
  console.log(`   Symbol: SST`);
  console.log(`   Address: ${contract.address}`);
  console.log(`   Initial Supply: 1,000,000 SST`);
  console.log(`   Decimals: 18`);
  console.log("");
  console.log("🔗 View on Explorer:");
  console.log(`   https://somnia-testnet.socialscan.io/address/${contract.address}`);
  console.log("");
  console.log("📝 Next Steps:");
  console.log("1. Verify the contract on the explorer");
  console.log("2. Test the application with the new contract address");
  console.log("3. Deploy to Vercel with the updated addresses");
}

main().catch((err) => {
  console.error("❌ Deployment failed:", err);
  process.exit(1);
});
